[{"data":1,"prerenderedAt":579},["Reactive",2],{"tags":3,"content-query-u0JbsCUt29":25},[4,10,15,18,20],{"tags":5},[6,7,8,9],"Security","Terraform","Azure","ChatGPT",{"tags":11},[12,13,14],"Infrastructure-as-Code","Ansible","Dev",{"tags":16},[6,17,9],"Soar",{"tags":19},[12,7,14],{"tags":21},[6,22,23,24],"pam","cloud","Infrastructure-as-code",[26,346],{"_path":27,"_dir":28,"_draft":29,"_partial":29,"_locale":30,"_empty":29,"title":31,"description":32,"img":33,"tags":34,"createdAt":35,"updatedAt":36,"body":37,"_type":341,"_id":342,"_source":343,"_file":344,"_extension":345},"/blog/creer-une-collection-ansible-redis-avec-molecule","blog",false,"","Créer une collection Ansible Redis avec Molecule","Découvrez comment utiliser Ansible et Molecule pour créer rapidement et efficacement une collection personnalisée pour Redis.","/post-thumbnail-01.jpg",[12,13,14],"2021-04-13T00:00:00.000Z",null,{"type":38,"children":39,"toc":333},"root",[40,77,82,97,104,109,121,133,139,144,156,168,174,193,205,217,229,241,253,264,276,282,293,305,310,322,328],{"type":41,"tag":42,"props":43,"children":44},"element","p",{},[45,48,54,56,61,63,68,70,75],{"type":46,"value":47},"text","Si vous êtes à la recherche d'un moyen pour automatiser l'installation et la configuration d'un cluster Redis, Ansible est un excellent choix. Dans cet article, nous allons voir comment créer une nouvelle ",{"type":41,"tag":49,"props":50,"children":51},"strong",{},[52],{"type":46,"value":53},"collection Ansible",{"type":46,"value":55}," pour l'installation et la configuration d'un ",{"type":41,"tag":49,"props":57,"children":58},{},[59],{"type":46,"value":60},"cluster Redis",{"type":46,"value":62}," en utilisant ",{"type":41,"tag":49,"props":64,"children":65},{},[66],{"type":46,"value":67},"Ansible Galaxy",{"type":46,"value":69}," et ",{"type":41,"tag":49,"props":71,"children":72},{},[73],{"type":46,"value":74},"Molecule",{"type":46,"value":76},".",{"type":41,"tag":42,"props":78,"children":79},{},[80],{"type":46,"value":81},"Ce dont vous avez besoin\nAvant de commencer, vous devez installer Ansible Galaxy et Molecule. Si vous ne les avez pas encore installés, voici comment procéder :",{"type":41,"tag":83,"props":84,"children":88},"code",{"className":85,"code":87},[86],"language-undefined","# Installation d'Ansible Galaxy\n$ sudo apt-get install ansible-galaxy\n\n# Installation de Molecule\n$ pip install molecule\n",[89],{"type":41,"tag":90,"props":91,"children":92},"pre",{},[93],{"type":41,"tag":83,"props":94,"children":95},{"__ignoreMap":30},[96],{"type":46,"value":87},{"type":41,"tag":98,"props":99,"children":101},"h2",{"id":100},"étape-1-création-de-la-collection-ansible",[102],{"type":46,"value":103},"Étape 1 : Création de la collection Ansible",{"type":41,"tag":42,"props":105,"children":106},{},[107],{"type":46,"value":108},"La première étape consiste à créer une nouvelle collection Ansible à l'aide de la commande ansible-galaxy collection init.",{"type":41,"tag":83,"props":110,"children":113},{"className":111,"code":112},[86],"$ ansible-galaxy collection init my_redis_cluster\n",[114],{"type":41,"tag":90,"props":115,"children":116},{},[117],{"type":41,"tag":83,"props":118,"children":119},{"__ignoreMap":30},[120],{"type":46,"value":112},{"type":41,"tag":42,"props":122,"children":123},{},[124,126,131],{"type":46,"value":125},"La commande créera une nouvelle collection nommée ",{"type":41,"tag":49,"props":127,"children":128},{},[129],{"type":46,"value":130},"my_redis_cluster",{"type":46,"value":132}," avec un ensemble de fichiers et de dossiers. Nous allons travailler principalement dans les dossiers roles et molecule de la collection.",{"type":41,"tag":98,"props":134,"children":136},{"id":135},"étape-2-création-du-rôle-ansible",[137],{"type":46,"value":138},"Étape 2 : Création du rôle Ansible",{"type":41,"tag":42,"props":140,"children":141},{},[142],{"type":46,"value":143},"La prochaine étape consiste à créer un nouveau rôle à l'intérieur de la collection. Nous allons utiliser Molecule pour créer la structure de notre rôle.",{"type":41,"tag":83,"props":145,"children":148},{"className":146,"code":147},[86],"$ cd my_redis_cluster/roles\n$ molecule init role -r redis_cluster\n",[149],{"type":41,"tag":90,"props":150,"children":151},{},[152],{"type":41,"tag":83,"props":153,"children":154},{"__ignoreMap":30},[155],{"type":46,"value":147},{"type":41,"tag":42,"props":157,"children":158},{},[159,161,166],{"type":46,"value":160},"La commande ci-dessus créera un nouveau rôle nommé ",{"type":41,"tag":49,"props":162,"children":163},{},[164],{"type":46,"value":165},"redis_cluster",{"type":46,"value":167}," à l'intérieur de notre collection. La commande créera également une structure de dossier initiale pour le rôle.",{"type":41,"tag":98,"props":169,"children":171},{"id":170},"étape-3-écriture-du-code",[172],{"type":46,"value":173},"Étape 3 : Écriture du code",{"type":41,"tag":42,"props":175,"children":176},{},[177,179,184,186,191],{"type":46,"value":178},"Nous sommes maintenant prêts à écrire le code pour notre rôle. Ouvrez le fichier ",{"type":41,"tag":49,"props":180,"children":181},{},[182],{"type":46,"value":183},"tasks/main.yml",{"type":46,"value":185}," dans le dossier ",{"type":41,"tag":49,"props":187,"children":188},{},[189],{"type":46,"value":190},"roles/redis_cluster",{"type":46,"value":192}," et ajoutez la tâche suivante pour installer Redis :",{"type":41,"tag":83,"props":194,"children":197},{"className":195,"code":196},[86],"- name: Install Redis\n  apt:\n    name: redis\n    state: present\n",[198],{"type":41,"tag":90,"props":199,"children":200},{},[201],{"type":41,"tag":83,"props":202,"children":203},{"__ignoreMap":30},[204],{"type":46,"value":196},{"type":41,"tag":42,"props":206,"children":207},{},[208,210,215],{"type":46,"value":209},"Ensuite, ouvrez le fichier ",{"type":41,"tag":49,"props":211,"children":212},{},[213],{"type":46,"value":214},"defaults/main.yml",{"type":46,"value":216}," et ajoutez les variables suivantes pour configurer Redis :",{"type":41,"tag":83,"props":218,"children":221},{"className":219,"code":220},[86],"redis_port: 6379\nredis_bind: 127.0.0.1\n",[222],{"type":41,"tag":90,"props":223,"children":224},{},[225],{"type":41,"tag":83,"props":226,"children":227},{"__ignoreMap":30},[228],{"type":46,"value":220},{"type":41,"tag":42,"props":230,"children":231},{},[232,234,239],{"type":46,"value":233},"Dans le fichier ",{"type":41,"tag":49,"props":235,"children":236},{},[237],{"type":46,"value":238},"templates/redis.conf.j2",{"type":46,"value":240},", ajoutez la configuration suivante :",{"type":41,"tag":83,"props":242,"children":245},{"className":243,"code":244},[86],"port {{ redis_port }}\nbind {{ redis_bind }}\n",[246],{"type":41,"tag":90,"props":247,"children":248},{},[249],{"type":41,"tag":83,"props":250,"children":251},{"__ignoreMap":30},[252],{"type":46,"value":244},{"type":41,"tag":42,"props":254,"children":255},{},[256,258,262],{"type":46,"value":257},"Enfin, modifiez le fichier ",{"type":41,"tag":49,"props":259,"children":260},{},[261],{"type":46,"value":183},{"type":46,"value":263}," pour appliquer la configuration à Redis :",{"type":41,"tag":83,"props":265,"children":268},{"className":266,"code":267},[86],"- name: Configure Redis\n  template:\n    src: redis.conf.j2\n    dest: /etc/redis/redis.conf\n  notify: Restart Redis\n\n- name: Restart Redis\n  service:\n    name: redis\n    state: restarted\n",[269],{"type":41,"tag":90,"props":270,"children":271},{},[272],{"type":41,"tag":83,"props":273,"children":274},{"__ignoreMap":30},[275],{"type":46,"value":267},{"type":41,"tag":98,"props":277,"children":279},{"id":278},"étape-4-tests-avec-molecule",[280],{"type":46,"value":281},"Étape 4 : Tests avec Molecule",{"type":41,"tag":42,"props":283,"children":284},{},[285,287,292],{"type":46,"value":286},"Il est maintenant temps de tester notre rôle avec Molecule. Nous allons utiliser la commande molecule test pour lancer les tests d'",{"type":41,"tag":49,"props":288,"children":289},{},[290],{"type":46,"value":291},"idempotence",{"type":46,"value":76},{"type":41,"tag":83,"props":294,"children":297},{"className":295,"code":296},[86],"$ cd ../molecule/default\n$ molecule test\n",[298],{"type":41,"tag":90,"props":299,"children":300},{},[301],{"type":41,"tag":83,"props":302,"children":303},{"__ignoreMap":30},[304],{"type":46,"value":296},{"type":41,"tag":42,"props":306,"children":307},{},[308],{"type":46,"value":309},"La commande ci-dessus va créer une machine virtuelle, appliquer notre rôle Ansible et vérifier que tout fonctionne correctement. Si tout est OK, vous devriez voir un message comme celui-ci :",{"type":41,"tag":83,"props":311,"children":314},{"className":312,"code":313},[86],"    PLAY RECAP *********************************************************************\n    instance                   : ok=3    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0\n\n",[315],{"type":41,"tag":90,"props":316,"children":317},{},[318],{"type":41,"tag":83,"props":319,"children":320},{"__ignoreMap":30},[321],{"type":46,"value":313},{"type":41,"tag":98,"props":323,"children":325},{"id":324},"conclusion",[326],{"type":46,"value":327},"Conclusion",{"type":41,"tag":42,"props":329,"children":330},{},[331],{"type":46,"value":332},"Dans cet article, nous avons vu comment créer une nouvelle collection Ansible pour l'installation et la configuration d'un cluster Redis en utilisant Ansible Galaxy et Molecule. Nous avons utilisé Ansible pour installer Redis et configuré les variables à l'aide de fichiers de configuration Jinja2. Nous avons également utilisé Molecule pour tester notre rôle Ansible et vérifier qu'il fonctionne correctement. Vous pouvez maintenant utiliser cette collection Ansible pour automatiser l'installation et la configuration de votre propre cluster Redis.",{"title":30,"searchDepth":334,"depth":334,"links":335},2,[336,337,338,339,340],{"id":100,"depth":334,"text":103},{"id":135,"depth":334,"text":138},{"id":170,"depth":334,"text":173},{"id":278,"depth":334,"text":281},{"id":324,"depth":334,"text":327},"markdown","content:blog:creer-une-collection-ansible-redis-avec-molecule.md","content","blog/creer-une-collection-ansible-redis-avec-molecule.md","md",{"_path":347,"_dir":28,"_draft":29,"_partial":29,"_locale":30,"_empty":29,"title":348,"description":349,"img":350,"tags":351,"createdAt":352,"updatedAt":36,"body":353,"_type":341,"_id":577,"_source":343,"_file":578,"_extension":345},"/blog/testez-votre-infrastructure-avec-terratest","Améliorez la robustesse de votre infrastructure avec Terratest.","Découvrez comment Terratest peut renforcer la solidité et la fiabilité de votre infrastructure.","/terratest.jpeg",[12,7,14],"2021-08-07T00:00:00.000Z",{"type":38,"children":354,"toc":565},[355,360,366,371,378,383,389,394,400,405,411,416,427,437,447,457,463,468,482,487,493,498,512,517,542,551,555,560],{"type":41,"tag":42,"props":356,"children":357},{},[358],{"type":46,"value":359},"Lorsqu'il s'agit de créer une infrastructure as code solide et fiable, il est essentiel de s'assurer que votre code fonctionne correctement avant de le déployer en production. C'est là que Terratest entre en jeu en vous offrant un outil puissant pour les tests d'infrastructure. Dans cet article, nous allons découvrir comment Terratest peut renforcer la solidité et la fiabilité de votre infrastructure Terraform, vous permettant ainsi de développer et déployer une infrastructure résiliente.",{"type":41,"tag":98,"props":361,"children":363},{"id":362},"les-avantages-des-tests-dinfrastructure-avec-terratest",[364],{"type":46,"value":365},"Les avantages des tests d'infrastructure avec Terratest",{"type":41,"tag":42,"props":367,"children":368},{},[369],{"type":46,"value":370},"Terratest est un outil avancé qui vous permet de tester votre infrastructure as code de manière approfondie. Voici pourquoi l'utilisation de Terratest peut être bénéfique pour votre organisation :",{"type":41,"tag":372,"props":373,"children":375},"h3",{"id":374},"_1-tests-didempotence",[376],{"type":46,"value":377},"1. Tests d'idempotence",{"type":41,"tag":42,"props":379,"children":380},{},[381],{"type":46,"value":382},"L'un des aspects clés des tests d'infrastructure est l'idempotence, c'est-à-dire la capacité du code à produire le même résultat, peu importe le nombre de fois qu'il est exécuté. Terratest facilite les tests d'idempotence en vous permettant de vérifier si votre infrastructure est correctement provisionnée et qu'aucun changement n'est apporté lorsque vous exécutez le code plusieurs fois. Cela garantit que votre infrastructure est stable et prévisible, éliminant les problèmes potentiels lors des déploiements.",{"type":41,"tag":372,"props":384,"children":386},{"id":385},"_2-tests-automatisés-avancés",[387],{"type":46,"value":388},"2. Tests automatisés avancés",{"type":41,"tag":42,"props":390,"children":391},{},[392],{"type":46,"value":393},"Terratest offre un large éventail de fonctionnalités pour automatiser vos tests d'infrastructure. Vous pouvez écrire des scripts de test en utilisant des langages familiers tels que Go, Python ou Shell, et exécuter ces tests de manière automatisée. Cela vous permet d'économiser du temps précieux en réduisant les tâches manuelles et en minimisant les erreurs humaines lors des tests.",{"type":41,"tag":372,"props":395,"children":397},{"id":396},"_3-intégration-transparente-avec-terraform",[398],{"type":46,"value":399},"3. Intégration transparente avec Terraform",{"type":41,"tag":42,"props":401,"children":402},{},[403],{"type":46,"value":404},"Terratest s'intègre parfaitement avec Terraform, l'outil populaire pour la création d'infrastructures as code. Vous pouvez utiliser Terratest pour valider votre code Terraform avant de le déployer, ce qui vous permet de détecter et corriger les éventuelles erreurs avant qu'elles ne causent des problèmes dans votre environnement de production. Cette intégration transparente favorise la collaboration entre les développeurs et les opérations, en assurant un déploiement harmonieux de l'infrastructure.",{"type":41,"tag":98,"props":406,"children":408},{"id":407},"préparez-vous-à-développer-une-infrastructure-résiliente-avec-terratest",[409],{"type":46,"value":410},"Préparez-vous à développer une infrastructure résiliente avec Terratest",{"type":41,"tag":42,"props":412,"children":413},{},[414],{"type":46,"value":415},"Maintenant que vous avez compris les nombreux avantages de Terratest, il est temps de préparer votre infrastructure à être résiliente et de qualité. Voici quelques suggestions pour commencer :",{"type":41,"tag":42,"props":417,"children":418},{},[419,425],{"type":41,"tag":420,"props":421,"children":422},"em",{},[423],{"type":46,"value":424},"Familiarisez-vous avec Terratest :",{"type":46,"value":426}," Explorez la documentation officielle de Terratest et recherchez des exemples de tests d'infrastructure pour vous familiariser avec les différentes fonctionnalités de l'outil.",{"type":41,"tag":42,"props":428,"children":429},{},[430,435],{"type":41,"tag":420,"props":431,"children":432},{},[433],{"type":46,"value":434},"Écrivez des tests d'idempotence :",{"type":46,"value":436}," Identifiez les parties clés de votre infrastructure et écrivez des tests pour vérifier si elles sont idempotentes. Cela vous permettra de garantir la stabilité de votre infrastructure lors des déploiements.",{"type":41,"tag":42,"props":438,"children":439},{},[440,445],{"type":41,"tag":420,"props":441,"children":442},{},[443],{"type":46,"value":444},"Automatisez vos tests :",{"type":46,"value":446}," Utilisez les scripts de test de Terratest pour automatiser vos tests d'infrastructure. Configurez des pipelines d'intégration continue pour exécuter ces tests à chaque changement de code, assurant ainsi une validation régulière de votre infrastructure as code.",{"type":41,"tag":42,"props":448,"children":449},{},[450,455],{"type":41,"tag":420,"props":451,"children":452},{},[453],{"type":46,"value":454},"Expérimentez avec d'autres fonctionnalités de Terratest :",{"type":46,"value":456}," Terratest offre de nombreuses autres fonctionnalités avancées, telles que la vérification des ressources Terraform, les tests de sécurité et les tests de performance. Expérimentez avec ces fonctionnalités supplémentaires pour renforcer davantage la fiabilité de votre infrastructure.",{"type":41,"tag":98,"props":458,"children":460},{"id":459},"exemple-de-code-terraform-azure-avec-un-load-balancer-et-des-vmss-linux",[461],{"type":46,"value":462},"Exemple de code Terraform Azure avec un load balancer et des VMSS Linux",{"type":41,"tag":42,"props":464,"children":465},{},[466],{"type":46,"value":467},"Voici un exemple de code Terraform pour créer un load balancer avec une Virtual Machine Scale Set (VMSS) Linux dans Microsoft Azure :",{"type":41,"tag":83,"props":469,"children":474},{"className":470,"code":472,"language":473,"meta":30},[471],"language-hcl","# exemple/main.tf\n\nprovider \"azurerm\" {\n  version = \"~> 2.0\"\n  features {}\n}\n\nresource \"azurerm_resource_group\" \"example\" {\n  name     = \"example-rg\"\n  location = \"West Europe\"\n}\n\nresource \"azurerm_virtual_network\" \"example\" {\n  name                = \"example-vnet\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n}\n\nresource \"azurerm_subnet\" \"example\" {\n  name                 = \"example-subnet\"\n  resource_group_name  = azurerm_resource_group.example.name\n  virtual_network_name = azurerm_virtual_network.example.name\n  address_prefixes     = [\"10.0.1.0/24\"]\n}\n\nresource \"azurerm_public_ip\" \"example\" {\n  name                = \"example-ip\"\n  resource_group_name = azurerm_resource_group.example.name\n  location            = azurerm_resource_group.example.location\n  allocation_method   = \"Static\"\n}\n\nresource \"azurerm_lb\" \"example\" {\n  name                = \"example-lb\"\n  resource_group_name = azurerm_resource_group.example.name\n  location            = azurerm_resource_group.example.location\n  sku                 = \"Standard\"\n\n  frontend_ip_configuration {\n    name                 = \"example-front-ip\"\n    public_ip_address_id = azurerm_public_ip.example.id\n  }\n}\n\nresource \"azurerm_lb_backend_address_pool\" \"example\" {\n  name                = \"example-backend-pool\"\n  resource_group_name = azurerm_resource_group.example.name\n  loadbalancer_id     = azurerm_lb.example.id\n}\n\nresource \"azurerm_lb_rule\" \"example\" {\n  name                           = \"example-lb-rule\"\n  resource_group_name            = azurerm_resource_group.example.name\n  loadbalancer_id                = azurerm_lb.example.id\n  frontend_ip_configuration_name = azurerm_lb.example.frontend_ip_configuration[0].name\n  backend_address_pool_id        = azurerm_lb_backend_address_pool.example.id\n  protocol                       = \"Tcp\"\n  frontend_port                  = 80\n  backend_port                   = 80\n  enable_floating_ip             = true\n}\n\nresource \"azurerm_virtual_machine_scale_set\" \"example\" {\n  name                = \"example-vmss\"\n  resource_group_name = azurerm_resource_group.example.name\n  location            = azurerm_resource_group.example.location\n  sku                 = \"Standard_DS2_v2\"\n  instances           = 3\n\n  upgrade_mode                                      = \"Manual\"\n  health_probe_id                                   = azurerm_lb.example.probes[0].id\n  single_placement_group                            = false\n  platform_fault_domain_count                       = 2\n  platform_update_domain_count                      = 2\n  termination_mode                                  = \"Default\"\n\n  storage_profile_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"UbuntuServer\"\n    sku       = \"16.04-LTS\"\n    version   = \"latest\"\n  }\n\n  storage_profile_os_disk {\n    name              = \"example-osdisk\"\n    caching           = \"ReadWrite\"\n    create_option     = \"FromImage\"\n    managed_disk_type = \"Standard_LRS\"\n  }\n\n  os_profile {\n    computer_name_prefix = \"example-vm\"\n    admin_username       = \"adminuser\"\n    admin_password       = \"P@ssw0rd1234\"\n  }\n\n  network_profile {\n    name = \"example-network-profile\"\n    network_interface {\n      name    = \"example-nic\"\n      primary = true\n\n      ip_configuration {\n        name                          = \"example-ip-config\"\n        subnet_id                     = azurerm_subnet.example.id\n        private_ip_address_allocation = \"Dynamic\"\n        load_balancer_backend_address_pool_ids = [\n          azurerm_lb_backend_address_pool.example.id\n        ]\n      }\n    }\n  }\n}\n","hcl",[475],{"type":41,"tag":90,"props":476,"children":477},{},[478],{"type":41,"tag":83,"props":479,"children":480},{"__ignoreMap":30},[481],{"type":46,"value":472},{"type":41,"tag":42,"props":483,"children":484},{},[485],{"type":46,"value":486},"Dans cet exemple, nous avons créé une ressource de groupe Azure (Resource Group) dans la région Ouest de l'Europe. Ensuite, nous avons créé un réseau virtuel (Virtual Network) avec un sous-réseau (Subnet). Nous avons également créé une adresse IP publique (Public IP) et un équilibreur de charge (Load Balancer). Le load balancer est configuré avec une règle pour rediriger le trafic vers trois machines virtuelles (VMSS).",{"type":41,"tag":98,"props":488,"children":490},{"id":489},"exemple-de-code-terratest",[491],{"type":46,"value":492},"Exemple de code Terratest",{"type":41,"tag":42,"props":494,"children":495},{},[496],{"type":46,"value":497},"Bien sûr ! Voici un exemple de code Terratest pour vérifier l'infrastructure décrite précédemment :",{"type":41,"tag":83,"props":499,"children":504},{"className":500,"code":502,"language":503,"meta":30},[501],"language-go","# terratest/default_test.go\n\npackage test\n\nimport (\n    \"os\"\n    \"testing\"\n    \"time\"\n\n    \"github.com/gruntwork-io/terratest/modules/azure\"\n    \"github.com/gruntwork-io/terratest/modules/terraform\"\n    test_structure \"github.com/gruntwork-io/terratest/modules/test-structure\"\n    \"github.com/stretchr/testify/assert\"\n)\n\nfunc TestEndToEndDeploymentScenario(t *testing.T) {\n\n    fixtureFolder := \"../example\"\n\n    // Variables à transmettre à notre code Terraform en utilisant les options -var\n    vars := map[string]interface{}{\n        \"tenant_id\":       os.Getenv(\"ARM_TENANT_ID\"),\n        \"subscription_id\": os.Getenv(\"ARM_SUBSCRIPTION_ID\"),\n        \"client_id\":       os.Getenv(\"ARM_CLIENT_ID\"),\n        \"client_secret\":   os.Getenv(\"ARM_CLIENT_SECRET\"),\n    }\n\n    // Utiliser Terratest pour déployer l'infrastructure\n    test_structure.RunTestStage(t, \"create\", func() {\n\n        terraformOptions := &terraform.Options{\n            TerraformDir: fixtureFolder,\n            Vars:         vars,\n            Parallelism:  1,\n        }\n\n        // Sauvegarder les options pour les étapes de test ultérieures\n        test_structure.SaveTerraformOptions(t, fixtureFolder, terraformOptions)\n\n        // Déclenche l'initialisation de Terraform et l'application du code\n        terraform.InitAndApply(t, terraformOptions)\n    })\n\n    // Vérifier que le groupe de ressources et la VMSS existent toujours\n    test_structure.RunTestStage(t, \"verify_resources\", func() {\n\n        terraformOptions := test_structure.LoadTerraformOptions(t, fixtureFolder)\n\n        // Récupérer le nom du groupe de ressources et de la VMSS\n        resourceGroupName := terraform.Output(t, terraformOptions, \"resource_group_name\")\n        vmssName := terraform.Output(t, terraformOptions, \"vmss_name\")\n\n        // Vérifier que le groupe de ressources existe toujours\n        azure.AssertResourceGroupExists(t, resourceGroupName)\n\n        // Vérifier que la VMSS existe toujours\n        timeout := time.Minute * 5\n        azure.AssertVirtualMachineScaleSetExists(t, vmssName, resourceGroupName, timeout)\n    })\n\n    // Vérifier l'idempotence de l'infrastructure\n    test_structure.RunTestStage(t, \"idempotence\", func() {\n\n        terraformOptions := test_structure.LoadTerraformOptions(t, fixtureFolder)\n\n        // Déclenche une vérification que la configuration Terraform est idempotente lorsqu'une deuxième\n        // exécution de `terraform apply` ne produit aucun changement\n        terraform.ApplyAndIdempotent(t, terraformOptions)\n    })\n\n    // Après la fin du test, détruire l'infrastructure en appelant `terraform destroy`\n    test_structure.RunTestStage(t, \"destroy\", func() {\n\n        terraformOptions := test_structure.LoadTerraformOptions(t, fixtureFolder)\n\n        // Déclenche la commande `terraform destroy`\n        defer terraform.Destroy(t, terraformOptions)\n    })\n}\n","go",[505],{"type":41,"tag":90,"props":506,"children":507},{},[508],{"type":41,"tag":83,"props":509,"children":510},{"__ignoreMap":30},[511],{"type":46,"value":502},{"type":41,"tag":42,"props":513,"children":514},{},[515],{"type":46,"value":516},"Dans cet exemple, deux tests ont été ajoutés :",{"type":41,"tag":518,"props":519,"children":520},"ol",{},[521,532],{"type":41,"tag":522,"props":523,"children":524},"li",{},[525,530],{"type":41,"tag":420,"props":526,"children":527},{},[528],{"type":46,"value":529},"verify_resources :",{"type":46,"value":531}," Ce test vérifie que le groupe de ressources et la VMSS existent toujours après le déploiement. Pour cela, nous utilisons les fonctions azure.AssertResourceGroupExists et azure.AssertVirtualMachineScaleSetExists pour effectuer les vérifications nécessaires.",{"type":41,"tag":522,"props":533,"children":534},{},[535,540],{"type":41,"tag":420,"props":536,"children":537},{},[538],{"type":46,"value":539},"idempotence :",{"type":46,"value":541}," Ce test vérifie toujours l'idempotence de l'infrastructure, comme mentionné précédemment.",{"type":41,"tag":543,"props":544,"children":545},"blockquote",{},[546],{"type":41,"tag":42,"props":547,"children":548},{},[549],{"type":46,"value":550},"N'oubliez pas d'ajuster le chemin du dossier fixtureFolder pour correspondre à votre propre configuration Terraform, et de configurer les variables d'environnement nécessaires. Vous pouvez exécuter ce test en utilisant la commande go test -v dans le répertoire contenant le fichier de test.",{"type":41,"tag":98,"props":552,"children":553},{"id":324},[554],{"type":46,"value":327},{"type":41,"tag":42,"props":556,"children":557},{},[558],{"type":46,"value":559},"L'utilisation de Terratest avec l'intégration de Terraform offre un moyen efficace de tester votre code d'infrastructure et d'automatiser les tests de bout en bout pour garantir la stabilité de votre environnement.",{"type":41,"tag":42,"props":561,"children":562},{},[563],{"type":46,"value":564},"Continuez à explorer les fonctionnalités de Terratest et Terraform pour améliorer davantage votre processus de test et garantir la qualité de votre code d'infrastructure.",{"title":30,"searchDepth":334,"depth":334,"links":566},[567,573,574,575,576],{"id":362,"depth":334,"text":365,"children":568},[569,571,572],{"id":374,"depth":570,"text":377},3,{"id":385,"depth":570,"text":388},{"id":396,"depth":570,"text":399},{"id":407,"depth":334,"text":410},{"id":459,"depth":334,"text":462},{"id":489,"depth":334,"text":492},{"id":324,"depth":334,"text":327},"content:blog:testez-votre-infrastructure-avec-terratest.md","blog/testez-votre-infrastructure-avec-terratest.md",1688982543213]